}
for(i in (ncol(temp)-1)){
plot(temp$genre, temp[i+1])
}
plot(temp$genre, temp$artist_name)
type(temp$genre)
class(temp$genre)
class(temp[1])
type(temp[1])
type("hey")
typeof(temp[1])
for(i in c(1, 2, 9, 12, 15)){
temp[i] <- factor(temp[i])
}
print(i)
for(i in c(1, 2, 9, 12, 15)){
print(i)
temp[i] <- factor(temp[i])
}
for(i in c(1, 2, 9, 12, 15)){
print(i)
temp[i] <- as.factor(temp[i])
}
temp <- df %>%
group_by(track_id) %>%
mutate(n = n()) %>%
ungroup() %>%
filter(n == 1) %>%
ungroup() %>% group_by(genre) %>%
mutate(count = n()) %>%
filter(count > 6000)
# Get rid of not useful columns
temp <- temp[, -c(2, 3, 4, 19, 20)]
temp$genre <- factor(temp$genre)
temp$key <- factor(temp$key)
temp$mode <- factor(temp$mode)
temp$time_signature <- factor(temp$time_signature)
plot(temp$genre, temp$popularity)
install.packages("GGally")
library(GGally)
ggpairs(temp)
ggpairs(temp, aes(color=genre))
pairs(temp)
temp_pairs = ggpairs(temp,axisLabels = "none",
upper = list(continuous = "points", combo = "dot"),
lower = list(continuous = "cor", combo = "dot"),
diag = list(continuous = "densityDiag")) +
theme_bw()
temp_pairs
View(temp_pairs)
temp$popularity <- factor(temp$popularity)
View(temp)
temp$acousticness <- scale(temp$acousticness)
View(temp)
temp$genre <- factor(temp$genre)
temp$popularity <- scale(temp$popularity)
temp <- df %>%
group_by(track_id) %>%
mutate(n = n()) %>%
ungroup() %>%
filter(n == 1) %>%
ungroup() %>% group_by(genre) %>%
mutate(count = n()) %>%
filter(count > 6000)
# Get rid of not useful columns
temp <- temp[, -c(2, 3, 4, 19, 20)]
temp$genre <- factor(temp$genre)
temp$popularity <- scale(temp$popularity)
temp$acousticness <- scale(temp$acousticness)
temp$danceability <- scale(temp$danceability)
temp$duration_ms <- scale(temp$duration_ms)
temp$energy <- scale(temp$energy)
temp$instrumentalness <- scale(temp$instrumentalness)
temp$key <- factor(temp$key)
temp$liveness <- scale(temp$liveness)
temp$loudness <- scale(temp$loudness)
temp$mode <- factor(temp$mode)
temp$speechiness <- scale(temp$speechiness)
temp$tempo <- scale(temp$tempo)
temp$time_signature <- factor(temp$time_signature)
temp$valence <- scale(temp$valence)
hist(temp$acousticness)
hist(temp$danceability)
hist(temp$duration_ms)
hist(temp$energy)
hist(temp$instrumentalness)
hist(temp$liveness)
hist(temp$speechiness)
hist(temp$tempo)
hist(temp$valence)
train_idx <- sample(nrow(temp), floor(nrow(temp)*0.7))
train <- temp[train_idx,]
test <- temp[-train_idx,]
write.csv(train, 'spotify_train.csv')
write.csv(test, 'spotify_test.csv')
# Load dataset
train <- readr::read_csv("spotify_train.csv")
# Load dataset
train <- readr::read_csv("spotify_train.csv")
test <- readr::read_csv("spotify_test.csv")
train$genre <- factor(train$genre)
test$genre <- factor(test$genre)
train$popularity <- scale(train$popularity)
train$acousticness <- scale(train$acousticness)
train$danceability <- scale(train$danceability)
train$duration_ms <- scale(train$duration_ms)
train$energy <- scale(train$energy)
train$instrumentalness <- scale(train$instrumentalness)
train$key <- factor(train$key)
test$key <- factor(test$key)
train$liveness <- scale(train$liveness)
train$loudness <- scale(train$loudness)
train$mode <- factor(train$mode)
test$mode <- factor(test$mode)
train$speechiness <- scale(train$speechiness)
train$tempo <- scale(train$tempo)
train$time_signature <- factor(train$time_signature)
test$time_signature <- factor(test$time_signature)
train$valence <- scale(train$valence)
knitr::opts_chunk$set(echo = TRUE)
train <- readr::read_csv("spotify_train.csv")
train <- readr::read_csv("spotify_train.csv")
test <- readr::read_csv("spotify_test.csv")
train$genre <- factor(train$genre)
test$genre <- factor(test$genre)
train$popularity <- scale(train$popularity)
train$acousticness <- scale(train$acousticness)
train$danceability <- scale(train$danceability)
train$duration_ms <- scale(train$duration_ms)
train$energy <- scale(train$energy)
train$instrumentalness <- scale(train$instrumentalness)
train$key <- factor(train$key)
test$key <- factor(test$key)
train$liveness <- scale(train$liveness)
train$loudness <- scale(train$loudness)
train$mode <- factor(train$mode)
test$mode <- factor(test$mode)
train$speechiness <- scale(train$speechiness)
train$tempo <- scale(train$tempo)
train$time_signature <- factor(train$time_signature)
test$time_signature <- factor(test$time_signature)
train$valence <- scale(train$valence)
library(randomForest)
rf = randomForest(genre ~ ., data = train, mtry = ncol(train)-1, importance = TRUE, ntree = 500)
df <- readr::read_csv("SpotifyFeatures.csv")
library(dplyr)
library(tidyr)
library(ggplot2)
library(GGally)
temp <- df %>%
group_by(track_id) %>%
mutate(n = n()) %>%
ungroup() %>%
filter(n == 1) %>%
ungroup() %>% group_by(genre) %>%
mutate(count = n()) %>%
filter(count > 6000)
temp <- temp[, -c(2, 3, 4, 19, 20)]
View(temp)
knitr::opts_chunk$set(echo = TRUE)
train <- readr::read_csv("spotify_train.csv")
test <- readr::read_csv("spotify_test.csv")
train$genre <- factor(train$genre)
test$genre <- factor(test$genre)
train$popularity <- scale(train$popularity)
train$acousticness <- scale(train$acousticness)
train$danceability <- scale(train$danceability)
train$duration_ms <- scale(train$duration_ms)
train$energy <- scale(train$energy)
train$instrumentalness <- scale(train$instrumentalness)
train$key <- factor(train$key)
test$key <- factor(test$key)
train$liveness <- scale(train$liveness)
train$loudness <- scale(train$loudness)
train$mode <- factor(train$mode)
test$mode <- factor(test$mode)
train$speechiness <- scale(train$speechiness)
train$tempo <- scale(train$tempo)
train$time_signature <- factor(train$time_signature)
test$time_signature <- factor(test$time_signature)
train$valence <- scale(train$valence)
plot(train$genre)
plot(temp$genre)
temp$genre <- factor(train$genre)
plot(temp$genre)
temp <- df %>%
group_by(track_id) %>%
mutate(n = n()) %>%
ungroup() %>%
filter(n == 1) %>%
ungroup() %>% group_by(genre) %>%
mutate(count = n()) %>%
filter(count > 6000)
# Get rid of not useful columns
temp <- temp[, -c(2, 3, 4, 19, 20)]
temp$genre <- factor(temp$genre)
plot(temp$genre)
plot(train$genre)
plot(test$genre)
View(temp)
View(train)
View(test)
train <- train[, -X1]
df <- readr::read_csv("SpotifyFeatures.csv")
library(dplyr)
library(tidyr)
library(ggplot2)
library(GGally)
temp <- df %>%
group_by(track_id) %>%
mutate(n = n()) %>%
ungroup() %>%
filter(n == 1) %>%
ungroup() %>% group_by(genre) %>%
mutate(count = n()) %>%
filter(count > 6000)
temp <- temp[, -c(2, 3, 4, 19, 20)]
train_idx <- sample(nrow(temp), floor(nrow(temp)*0.7))
train <- temp[train_idx,]
test <- temp[-train_idx,]
write.csv(train, 'spotify_train.csv')
write.csv(test, 'spotify_test.csv')
train$genre <- factor(train$genre)
test$genre <- factor(test$genre)
plot(temp$genre)
plot(train$genre)
plot(test$genre)
temp$genre <- factor(temp$genre)
plot(temp$genre)
train$key <- factor(train$key)
test$key <- factor(test$key)
train$mode <- factor(train$mode)
test$mode <- factor(test$mode)
train$time_signature <- factor(train$time_signature)
test$time_signature <- factor(test$time_signature)
library(randomForest)
test_error = c()
for(i in seq(2, ncol(train)-1)){
rf = randomForest(genre ~ ., data = train, mtry = i,
importance = TRUE, ntree = 100)
pred_test = predict(rf, test, type="class")
test_err = sum(pred_test != test$genre)/dim(test)[1]
test_error[i-1] = test_err
}
View(df)
rf = randomForest(genre ~ ., data = train, mtry = i,
importance = TRUE, ntree = 100)
pred_test = predict(rf, test, type="class")
test_err = sum(pred_test != test$genre)/dim(test)[1]
test_err
View(test)
test_error = c()
for(i in seq(2, ncol(train)-1)){
rf = randomForest(genre ~ ., data = train, mtry = i,
importance = TRUE, ntree = 100)
pred_test = predict(rf, test, type="class")
test_err = sum(pred_test != test$genre)/dim(test)[1]
test_error[i-1] = test_err
}
plot(test_error)
which.min(test_error)
rf = randomForest(genre~., data = train, mtry = 4,
importance = True, ntree = 1000)
rf = randomForest(genre~., data = train, mtry = 4,
importance = TRUE, ntree = 1000)
importance(rf)
pred_test = predict(rf, test, type="class")
sum(pred_test != test$genre)/dim(test)[1]
rf = randomForest(genre~., data = train, mtry = 4,
importance = TRUE, ntree = 2000)
importance(rf)
pred_test = predict(rf, test, type="class")
sum(pred_test != test$genre)/dim(test)[1]
pgamma(seq(1:5), shape=4, rate=1000)
source('~/.active-rstudio-document', echo=TRUE)
pgamma(seq(900), shape=4, rate=1000)
pgamma(seq(900, 1000, 100), shape=4, rate=1000)
dgamma(seq(900, 1000, 100), shape=4, rate=1000)
dgamma(900, shape=4, rate=1000)
dgamma(900, shape=4, rate=1000)/4
pgamma(900, shape=4, rate=1000)/4
pgamma(500, shape=4, rate=1000)/4
pgamma(200, shape=4, rate=1000)/4
pgamma(1500, shape=4, rate=1000)/4
pgamma(1500, shape=4, rate=1000)
pgamma(seq(1000, 5000, 1000), shape=4, rate=1000)
pgamma(seq(1000, 5000, 1000), shape=4, rate=1000, scale=1/1000)
pgamma(seq(1000, 5000, 1000), shape=4, scale=1/1000)
pgamma(seq(0, 5000, 1000), shape=4, scale=1/1000)
pgamma(seq(0, 2000, 100), shape=4, scale=1/1000)
pgamma(seq(0, 2000, 100), shape=4, scale=1000)
pgamma(seq(0, 1000, 100), shape=4, scale=1000)
pgamma(seq(0, 1500, 100), shape=4, scale=1000)
pgamma(1366, shape=4, scale=1000)
pgamma(1000, shape=4, scale=1000)
1366/4
pgamma(1366, shape=4, scale=900)
punif(0.1, min=0, max=1/0.05)
punif(0.2, min=0, max=1/0.05)
punif(5, min=0, max=1/0.05)
punif(1, min=0, max=1/0.05)
pbeta(10, shape1=6, shape2=1)
pbeta(0.1, shape1=6, shape2=1)
pbeta(0.9, shape1=6, shape2=1)
pbeta(1.2, shape1=6, shape2=1)
pbeta(0.98, shape1=6, shape2=1)
qbeta(0.98, shape1=6, shape2=1)
qbeta(0.95, shape1=6, shape2=1)
qbeta(0.95, shape1=6, shape2=1)*25
qgamma(0.95, shape1=6, shape2=1)*25
qgamma(0.95, shape=4, scale=1000)
qgamma(0.05, shape=4, scale=1000)
qbeta(0.05, shape1=4, shape2=4)
qbeta(0.05, shape1=10, shape2=4)
qbeta(0.05, shape1=2, shape2=4)
pgamma(1366.318, shape=4, scale=900)
qbeta(0.05, shape1=6, shape2=1)
qbeta(0.05, shape1=6, shape2=1)*25
qbeta(0.95, shape1=6, shape2=1)*25
install.packages("maboost")
knitr::opts_chunk$set(echo = TRUE)
train <- readr::read_csv("spotify_train.csv")
test <- readr::read_csv("spotify_test.csv")
View(test)
View(train)
train <- readr::read_csv("spotify_train.csv")
train <- train[, -c('X1')]
train <- readr::read_csv("spotify_train.csv")
train <- train[, -c(X1)]
View(test)
View(train)
train <- train[, -c(1)]
View(train)
train <- readr::read_csv("spotify_train.csv")
train <- train[, -c(1)]
test <- readr::read_csv("spotify_test.csv")
test <- test[, -c(1)]
train$genre <- factor(train$genre)
test$genre <- factor(test$genre)
train$key <- factor(train$key)
test$key <- factor(test$key)
train$mode <- factor(train$mode)
test$mode <- factor(test$mode)
train$time_signature <- factor(train$time_signature)
test$time_signature <- factor(test$time_signature)
library(maboost)
boost <- maboost(genre~., data = train, breg = 'entrop', iter = 100, nu = 0.1, bag.frac = 0.5)
pred_test_bt = predict(boost, test, type="class")
sum(pred_test != test$genre)/dim(test)[1]
sum(pred_test_bt != test$genre)/dim(test)[1]
test_error_bt = c()
for(shrink in c(0.01, 0.05, 0.1, 0.5)){
for(i in c(100, 500, 1000, 5000)){
boost <- maboost(genre~., data = train, breg = 'entrop', iter = 100, nu = 0.1, bag.frac = 0.5)
pred_test = predict(boost, test, type="class")
test_err = sum(pred_test != test$genre)/dim(test)[1]
test_error_bt = cbind(test_error_bt, test_err)
}
}
test_error_bt
test_error_bt = c()
for(shrink in c(0.01, 0.05, 0.1, 0.5)){
for(i in c(100, 500, 1000, 5000)){
boost <- maboost(genre~., data = train, breg = 'entrop', iter = 100, nu = 0.1, bag.frac = 1)
pred_test = predict(boost, test, type="class")
test_err = sum(pred_test != test$genre)/dim(test)[1]
test_error_bt = cbind(test_error_bt, test_err)
}
}
test_error_bt = c()
for(shrink in c(0.01, 0.05, 0.1, 0.5)){
for(i in c(100, 500, 1000, 5000)){
boost <- maboost(genre~., data = train, breg = 'entrop', iter = i, nu = shrink, bag.frac = 1)
pred_test = predict(boost, test, type="class")
test_err = sum(pred_test != test$genre)/dim(test)[1]
test_error_bt = cbind(test_error_bt, test_err)
}
}
test_error_bt = c()
for(shrink in c(0.01, 0.05, 0.1, 0.5)){
for(i in c(50, 100, 500, 1000)){
boost <- maboost(genre~., data = train, breg = 'entrop', iter = i, nu = shrink, bag.frac = 1)
pred_test = predict(boost, test, type="class")
test_err = sum(pred_test != test$genre)/dim(test)[1]
test_error_bt = cbind(test_error_bt, test_err)
}
}
test_error_bt
library(maboost)
test_error_bt = c()
for(shrink in c(0.1, 0.25, 0.5, 0.75, 1)){
for(i in c(1000, 1500, 2000)){
boost <- maboost(genre~., data = train, breg = 'entrop', iter = i, nu = shrink, bag.frac = 1)
pred_test = predict(boost, test, type="class")
test_err = sum(pred_test != test$genre)/dim(test)[1]
test_error_bt = cbind(test_error_bt, test_err)
}
}
valid_idx = sample(nrow(train), floor(nrow(train)*.1), replace = FALSE)
rf = randomForest(genre~., data = train, mtry = 4,
importance = TRUE, ntree = 1000)
library(randomForest)
rf = randomForest(genre~., data = train, mtry = 4,
importance = TRUE, ntree = 1000)
rf
rf$oob.times
rf$err.rate
mean(rf$err.rate)
rf$err.rate$oob
rf$err.rate$OOB
rf$err.rate[,1]
rf
rf$err.rate[nrow(rf$err.rate),1]
library(randomForest)
oob = c()
for(tree in c(100, 500, 1000, 5000)){
for(i in seq(2, ncol(train)-1)){
rf = randomForest(genre~., data=train[-valid_idx], mtry=i, importance=TRUE, ntree=tree)
final_oob = rf$err.rate[nrow(rf$err.rate),1]
oob = cbind(oob, final_oob)
}
}
library(randomForest)
oob = c()
for(tree in c(100, 500, 1000, 5000)){
for(i in seq(2, ncol(train)-1)){
rf = randomForest(genre~., data=train, mtry=i, importance=TRUE, ntree=tree)
final_oob = rf$err.rate[nrow(rf$err.rate),1]
oob = cbind(oob, final_oob)
}
}
oob
which.min(oob)
View(train)
oob[28]
rf = randomForest(genre~., data = train, mtry = 3,
importance = TRUE, ntree = 1000)
rf$err.rate[nrow(rf$err.rate),1]
varImpPlot(rf)
pred_test = predict(rf, test, type="class")
sum(pred_test != test$genre)/dim(test)[1]
varImpPlot(rf)
boost <- maboost(genre~., data = train, breg = 'entrop', iter = 1000, nu = 0.5, bag.frac = 1)
boost <- maboost(genre~., data = train, breg = 'entrop', iter = 1000, nu = 0.5, bag.frac = 1)
varplot.maboost(boost)
pred_test_bt = predict(boost, test, type="class")
sum(pred_test_bt != test$genre)/dim(test)[1]
train_err = c()
for(shrink in c(0.1, 0.25, 0.5, 0.75, 1)){
for(i in c(1000, 2000)){
valid = sample(nrow(train), floor(nrow(train)*.3))
boost <- maboost(genre~., data = train[-valid], breg = 'entrop', iter = i, nu = shrink, bag.frac = 1)
pred = predict(boost, train[valid], type="class")
err = sum(pred != train[valid]$genre)/dim(train[valid])[1]
train_err = cbind(train_err, err)
}
}
nrow(train)
nrow(train[-valid])
nrow(train[-c(valid)])
nrow(train[-valid,])
nrow(train[valid,])
train_err = c()
for(shrink in c(0.1, 0.25, 0.5, 0.75, 1)){
for(i in c(1000, 2000)){
valid = sample(nrow(train), floor(nrow(train)*.3))
boost <- maboost(genre~., data = train[-valid,], breg = 'entrop', iter = i, nu = shrink, bag.frac = 1)
pred = predict(boost, train[valid,], type="class")
err = sum(pred != train[valid,]$genre)/dim(train[valid,])[1]
train_err = cbind(train_err, err)
}
}
which.min(train_err)
train_err
train_err = c()
for(shrink in c(0.1, 0.5)){
for(i in c(2000, 5000)){
valid = sample(nrow(train), floor(nrow(train)*.3))
boost <- maboost(genre~., data = train[-valid,], breg = 'entrop', iter = i, nu = shrink, bag.frac = 1)
pred = predict(boost, train[valid,], type="class")
err = sum(pred != train[valid,]$genre)/dim(train[valid,])[1]
train_err = cbind(train_err, err)
}
}
which.min(train_err)
```{r}
## Adaboost Model
# Load library for multiclass classification
library(maboost)
# Find best parameters based on validation training error
train_err = c()
for(shrink in c(0.1, 0.5)){
for(i in c(2000, 5000)){
valid = sample(nrow(train), floor(nrow(train)*.3))
boost <- maboost(genre~., data = train[-valid,], breg = 'entrop', iter = i, nu = shrink, bag.frac = 1)
pred = predict(boost, train[valid,], type="class")
err = sum(pred != train[valid,]$genre)/dim(train[valid,])[1]
train_err = cbind(train_err, err)
}
}
which.min(train_err)
# Fit model based on best parameters
#boost <- maboost(genre~., data = train, breg = 'entrop', iter = 1000, nu = 0.5, bag.frac = 1)
# Find important variables and test error
#varplot.maboost(boost)
#pred_test_bt = predict(boost, test, type="class")
#sum(pred_test_bt != test$genre)/dim(test)[1]
train_err
load("mnist.Rdata")
objects()
install.packages('devtools')
devtools::install_github("rstudio/keras")
